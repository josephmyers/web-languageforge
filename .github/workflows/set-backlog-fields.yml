name: Add Issue to Project

on:
  issues:
    types: [ opened ]

jobs:
  steve:
    if: ${{ !github.event.issue.pull_request }}
    runs-on: ubuntu-latest
    steps:
      - name: is issue already on project
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          REPO: ${{ toJson(github.repository) }}
        run: |
          echo issue $ISSUE_NUMBER added to $REPO
          gh api graphql -f query='
            query($issue_number:Int!) {
              repository(name:"web-languageforge", owner:"josephmyers") {
                issue(number: $issue_number) {
                  id
                  projectNextItems(first:100) {
                    nodes {
                      id
                    }
                  }
                }
              }
            }' -f issue_number=${{ env.ISSUE_NUMBER }} > project_data.json
          
          echo 'IN_PROJECT='$(jq '.data.repository.issue.id.projectNextItems[] | length' project_data.json) >> $GITHUB_ENV
    
      - name: get backlog field ID
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
          ORGANIZATION: josephmyers
        run: |
          gh api graphql -f query='
            query($org: String!) {
              user(login: $org){
                projectNext(number: 1) {
                  id
                  fields(first:20) {
                    nodes {
                      id
                      name
                      settings
                    }
                  }
                }
              }
            }' -f org=$ORGANIZATION > project_data.json
            
          echo 'PROJECT_ID='$(jq '.data.user.projectNext.id' project_data.json) >> $GITHUB_ENV
          echo 'FIELD_ID='$(jq '.data.user.projectNext.fields.nodes[] | select(.name== "Backlog") | .id' project_data.json) >> $GITHUB_ENV
          echo 'TRIAGE_ID='$(jq '.data.user.projectNext.fields.nodes[] | select(.name== "Backlog") | .settings | fromjson.options[] | select(.name=="Triage") | .id' project_data.json) >> $GITHUB_ENV
        
      - name: Add issue to project
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
          CONTEXT_GITHUB: ${{ toJson(github) }}
          ISSUE_ID: ${{ github.event.issue.node_id }}
        run: |
          item_id="$( gh api graphql -f query='
            mutation($project:ID!, $item:ID!) {
              addProjectNextItem(input: {projectId: $project, contentId: $item}) {
                projectNextItem {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f item=$ISSUE_ID --jq '.data.addProjectNextItem.projectNextItem.id')"
          
          echo 'ITEM_ID='$item_id >> $GITHUB_ENV
          
      - name: set fields
        #if: ${{ IN_PROJECT }} == 0
        if: env.GITHUB_TOKEN
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        run: |
          gh api graphql -f query='
            mutation(
              $project:ID!
              $item:ID!
              $field: ID!
              $field_value: String!)
            {
              updateProjectNextItemField(input: {
                projectId: $project
                itemId: $item
                fieldId: $field
                value: $field_value})
              {
                projectNextItem {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f item=$ITEM_ID -f field=$FIELD_ID -f field_value=${{ env.TRIAGE_ID }}
            
